ausf:
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}
bsf:
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}
nrf:
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}
pcf:
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}

hss:
  enabled: false

mme:
  enabled: false

pcrf:
  enabled: false

smf:
  config:
    pcrf:
      enabled: false
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}

sgwc:
  enabled: false

sgwu:
  enabled: false

amf:
  config:
    guamiList:
      - plmn_id:
          mcc: "999"
          mnc: "70"
        amf_id:
          region: 2
          set: 1
    taiList:
      - plmn_id:
          mcc: "999"
          mnc: "70"
        tac: [1]
    plmnList:
      - plmn_id:
          mcc: "999"
          mnc: "70"
        s_nssai:
          - sst: 1
            sd: "0x111111"
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}

udr:
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}

udm:
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}

upf:
  replicaCount: 4
#  # ensure each UPF is only scheduled to nodes in the "cluster-autoscaling-ng" node group
#  affinity:
#    nodeAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#        nodeSelectorTerms:
#            - matchExpressions:
#              - key: eks.amazonaws.com/nodegroup
#                operator: In
#                values:
#                  - cluster-autoscaling-ng
#
#    # ensure each node in the "cluster-autoscaling-ng" node group only has one UPF
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - upf
        topologyKey: kubernetes.io/hostname
        namespaces:
          - openverso
# uncomment below line to select single node
#  nodeSelector: {eks.amazonaws.com/nodegroup : upf-bedc-small}

# uncomment below lines to add topology spread constraints for scheduling pods
#  topologySpreadConstraints:
#  - maxSkew: 1
#    topologyKey: kubernetes.io/hostname
#    whenUnsatisfiable: DoNotSchedule
#    labelSelector:
#      matchLabels:
#        app.kubernetes.io/instance: open5gs
#        app.kubernetes.io/name: upf
#        helm.sh/chart: upf-2.0.6
  # affinity logic to deploy pods in multiple nodegroups
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: eks.amazonaws.com/nodegroup
            operator: In
            values:
            - upf-bedc-large


nssf:
  config:
    nsiList:
      - nrf:
          hostname: ""  # if empty default is autogenerated open5gs svc fullname
          port: 7777
        sst: 1
        sd: "0x111111"
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}

webui:
  enabled: false
  ingress:
    enabled: false
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}

populate:
  enabled: true
  nodeSelector: {eks.amazonaws.com/nodegroup : control-plane}